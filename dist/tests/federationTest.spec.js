"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Lab = require("lab");
var code_1 = require("code");
var Player_1 = require("../logic/Player");
var Federation_1 = require("../logic/Federation");
var MapBoard_1 = require("../logic/MapBoard");
var Action_1 = require("../logic/Action");
var Game_1 = require("../logic/Game");
var Request_1 = require("../logic/Request");
var lab = Lab.script();
exports.lab = lab;
var describe = lab.describe, it = lab.it, before = lab.before, beforeEach = lab.beforeEach;
describe('Federation Test', function () {
    var g = new Game_1.Game(3);
    var board = g.board;
    var h1 = new MapBoard_1.Hex(1, 4, -5);
    var h2 = new MapBoard_1.Hex(2, 3, -5);
    var h3 = new MapBoard_1.Hex(3, 3, -6);
    var h4 = new MapBoard_1.Hex(8, 1, -9);
    var h5 = new MapBoard_1.Hex(2, 4, -6);
    var p1 = board.getPlanet(h1);
    var p2 = board.getPlanet(h2);
    var p3 = board.getPlanet(h3);
    var p4 = board.getPlanet(h4);
    var p5 = board.getPlanet(h5);
    p1.playerID = 1;
    p2.playerID = 1;
    p3.playerID = 1;
    p4.playerID = 1;
    p5.playerID = 2;
    var p;
    g.federationlib = new Federation_1.FederationLib(false);
    var request;
    var action;
    beforeEach(function () {
        p = Player_1.CreatePlayer('nina', Player_1.RaceType.Terrans);
        p.pid = 1;
        request = new Request_1.Request();
    });
    it('can not federate with illegal request', function () {
        action = new Action_1.Action(g, p, request);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(false);
        code_1.expect(action.message).to.equal("federationTokenType required");
    });
    it('can not pass with an illegal token type', function () {
        request.federationTokenType = 7;
        action = new Action_1.Action(g, p, request);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(false);
        code_1.expect(action.message).to.equal("can not find this toke at game federationlib");
    });
    it('can not fed with low value buildings', function () {
        p1.building = 0;
        p2.building = 0;
        p3.building = 0;
        request.path.push(h1);
        request.path.push(h2);
        request.path.push(h3);
        request.federationTokenType = 1;
        action = new Action_1.Action(g, p, request);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(false);
        code_1.expect(action.message).to.equal("value of the buildings is too low");
    });
    it('can not go through another player s planet', function () {
        p1.building = 0;
        p2.building = 0;
        p3.building = 0;
        p5.building = 1;
        request.path.push(h1);
        request.path.push(h2);
        request.path.push(h5);
        request.federationTokenType = 1;
        action = new Action_1.Action(g, p, request);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(false);
        code_1.expect(action.message).to.equal("there is another players planet on the path");
    });
    it('can not let a player federate without enough power', function () {
        p2.building = 4;
        p3.building = 3;
        p4.building = 3;
        request.path.push(h2);
        request.path.push(h3);
        request.path.push(new MapBoard_1.Hex(4, 2, -6));
        request.path.push(new MapBoard_1.Hex(5, 2, -7));
        request.path.push(new MapBoard_1.Hex(6, 1, -7));
        request.path.push(new MapBoard_1.Hex(8, 1, -9));
        request.path.push(h4);
        p.power.bowl1 = 0;
        p.power.bowl2 = 0;
        request.federationTokenType = 1;
        action = new Action_1.Action(g, p, request);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(false);
        code_1.expect(action.message).to.equal("player do not have enough power to federate");
    });
    it('can pass the check fed with all settings rightly set', function () {
        p2.building = 4;
        p3.building = 3;
        p4.building = 3;
        request.path.push(h2);
        request.path.push(h3);
        request.path.push(new MapBoard_1.Hex(4, 2, -6));
        request.path.push(new MapBoard_1.Hex(5, 2, -7));
        request.path.push(new MapBoard_1.Hex(6, 1, -7));
        request.path.push(new MapBoard_1.Hex(8, 1, -9));
        request.path.push(h4);
        request.federationTokenType = 1;
        action = new Action_1.Action(g, p, request);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(true);
    });
    it('can form federation', function () {
        p2.building = 4;
        p3.building = 3;
        p4.building = 3;
        request.path.push(h2);
        request.path.push(h3);
        request.path.push(new MapBoard_1.Hex(4, 2, -6));
        request.path.push(new MapBoard_1.Hex(5, 2, -7));
        request.path.push(new MapBoard_1.Hex(6, 1, -7));
        request.path.push(new MapBoard_1.Hex(8, 1, -9));
        request.path.push(h4);
        request.federationTokenType = 1;
        action = new Action_1.Action(g, p, request);
        var judge = action.FormFederation();
        code_1.expect(judge).to.equal(true);
    });
    it('can not use the same space in another federation s path to fed', function () {
        // fed a federation first
        p1.building = 1;
        p2.building = 4;
        p3.building = 3;
        p4.building = 3;
        request.path.push(h2);
        request.path.push(h3);
        request.path.push(new MapBoard_1.Hex(4, 2, -6));
        request.path.push(new MapBoard_1.Hex(5, 2, -7));
        request.path.push(new MapBoard_1.Hex(6, 1, -7));
        request.path.push(new MapBoard_1.Hex(8, 1, -9));
        request.path.push(h4);
        request.federationTokenType = 1;
        action = new Action_1.Action(g, p, request);
        action.FormFederation();
        // use one point in the former one to form another federation
        var request2 = new Request_1.Request();
        request2.path.push(h1);
        request2.path.push(h2);
        request2.path.push(h3);
        request2.federationTokenType = 2;
        action = new Action_1.Action(g, p, request2);
        var judge = action.checkFederation();
        code_1.expect(judge).to.equal(false);
        code_1.expect(action.message).to.equal("this path has some place in another federation");
    });
});
